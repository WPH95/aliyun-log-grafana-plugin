{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","projectName","jsonData","project","logstore","user","password","q","withCredentials","headers","basicAuth","length","defaultConfig","accessId","accessKey","timeout","signature_method","api_version","logger","options","console","log","requests","slsclient","promise","Promise","resolve","targets","forEach","target","hide","request","GetData","parseInt","range","from","_d","getTime","to","query","then","result","data","Data","reject","Error","time_col","xcol","ycol","reduce","split","join","push","resResult","datapoints","sortBy","_time","time","value","col","all","map","p","catch","e","_t","t","err","message","status","title","Date","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","doRequest","method","interpolated","mapToTextValue","d","i","text","isObject","datasourceRequest","filter","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {SLS} from \"./sls.js\";\n\nexport class GenericDatasource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.projectName = instanceSettings.jsonData.project;\n        this.logstore = instanceSettings.jsonData.logstore;\n        //this.endpoint = instanceSettings.jsonData.endpoint;\n        this.user = instanceSettings.jsonData.user;\n        this.password = instanceSettings.jsonData.password;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n        this.defaultConfig = {\n\n            //requires\n            accessId: this.user,                  //accessId\n            accessKey: this.password,                 //accessKey\n            //endpoint: this.endpoint,            //sls service endpoint\n\n            //optional\n            timeout: 20000,         //请求timeout时间, 默认: 20s\n\n\n            signature_method: 'hmac-sha1', //签名计算方式，目前只支持'hmac-sha1', 默认: 'hmac-sha1'\n            api_version: '0.3.0',  //数据相关api version 默认 0.3.0\n\n            logger: false   //打印请求的详细信息, log4js 实例\n        };\n\n    }\n\n    query(options) {\n        console.log(\"hello\")\n        let requests = []\n        let slsclient = new SLS(this.defaultConfig, this.backendSrv, this.url);\n        let promise = Promise.resolve();\n        _(options.targets).forEach(target => {\n            if (target.hide) {\n                return\n            }\n            let request = slsclient.GetData(this.projectName, {\n                \"Category\": this.logstore,\n                \"Topic\": \"\",\n                \"BeginTime\": parseInt(options.range.from._d.getTime() / 1000),\n                \"EndTime\": parseInt(options.range.to._d.getTime() / 1000),\n                \"Query\": target.query,\n                \"Reverse\": \"false\",\n                \"Lines\": \"100\",\n                \"Offset\": \"0\"\n            })\n                .then(result => {\n                    if (!(result.data && result.data.GetData && result.data.GetData.Data)) {\n                        return Promise.reject(new Error(\"this promise is rejected\"));\n                    }\n\n                    result.time_col = target.xcol\n                    result.ycol = _.reduce(target.ycol.split(\",\"), (result, data) => {\n                        data = data.split(' ').join('')\n                        if (data) {\n                            result.push(data)\n                        }\n                        return result\n                    }, [])\n                    return result\n                })\n                .then(result => {\n                    console.log(\"test\")\n                    let resResult = []\n                    _(result.ycol).forEach(col => {\n                        let datapoints = []\n\n                        _.sortBy(result.data.GetData.Data, [result.time_col]).forEach(data => {\n                            const _time = data[result.time_col]\n                            const time = parseInt(_time) * 1000\n                            const value = parseInt(data[col])\n                            datapoints.push([value, time])\n                        })\n                        resResult.push({\n                            \"target\": col,\n                            \"datapoints\": datapoints\n                        })\n                    })\n                    return resResult\n\n                });\n            requests.push(request)\n\n        })\n\n        return Promise.all(requests\n            .map(p => p.catch(e => e)))\n            .then(requests => {\n                console.log(\"1:\", requests)\n\n                const _t = _.reduce(requests, (result, data) => {\n                    _(data).forEach(t => result.push(t))\n                    return result\n                }, [])\n                console.log(\"1:\", _t)\n                return {\n                    data: _t\n                }\n\n            }) // 1,Error: 2,3\n            .catch(err => {\n                if (err.data && err.data.message) {\n                    return {status: \"error\", message: err.data.message, title: \"Error\"};\n                } else {\n                    return {status: \"error\", message: err.status, title: \"Error\"};\n                }\n            });\n    }\n\n    testDatasource() {\n        let slsclient = new SLS(this.defaultConfig, this.backendSrv, this.url);\n        return slsclient.GetData(this.projectName,\n            {\n                \"Category\": this.logstore,\n                \"Topic\": \"\",\n                \"BeginTime\": parseInt((new Date().getTime() / 1000) - 900),\n                \"EndTime\": parseInt(new Date().getTime() / 1000),\n                \"Query\": \"\",\n                \"Reverse\": \"false\",\n                \"Lines\": \"10\",\n                \"Offset\": \"0\"\n            }).then(function (result) {\n\n            return {status: \"success\", message: \"Database Connection OK\", title: \"Success\"};\n        }, function (err) {\n            console.log(\"testDataSource err\", err);\n            if (err.data && err.data.message) {\n                return {status: \"error\", message: err.data.message, title: \"Error\"};\n            } else {\n                return {status: \"error\", message: err.status, title: \"Error\"};\n            }\n\n        });\n\n\n    }\n\n    annotationQuery(options) {\n        let query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        let annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query) {\n\n        let interpolated = {\n            target: this.templateSrv.replace(query, null, 'regex')\n        };\n\n        return this.doRequest({\n            url: this.url + '/search',\n            data: interpolated,\n            method: 'POST',\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            if (d && d.text && d.value) {\n                return {text: d.text, value: d.value};\n            } else if (_.isObject(d)) {\n                return {text: d, value: i};\n            }\n            return {text: d, value: d};\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        let targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie'\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}